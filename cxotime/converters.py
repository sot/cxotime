"""Fast time converter functions.

These are all wrappers around the :func:`~cxotime.convert.convert_time_format` function.

Autogenerated by make_converters.py at 2025-01-24 18:55:24.874
"""

from cxotime.convert import convert_time_format

__all__ = [
    "secs2greta",
    "secs2maude",
    "secs2jd",
    "secs2date",
    "greta2secs",
    "greta2maude",
    "greta2jd",
    "greta2date",
    "maude2secs",
    "maude2greta",
    "maude2jd",
    "maude2date",
    "jd2secs",
    "jd2greta",
    "jd2maude",
    "jd2date",
    "date2secs",
    "date2greta",
    "date2maude",
    "date2jd",
]


def secs2greta(time):
    """
    Convert CXC seconds to GRETA date.

    This is equivalent to ``CxoTime(time, format='secs').greta`` but potentially 10x faster.

    Format in: CXC seconds (numeric)
    Format out: YYYYDDD.HHMMSSsss (str)

    Parameters
    ----------
    time : float, int, list, ndarray
        CXC seconds

    Returns
    -------
    date : str, np.ndarray[str]
        GRETA date
    """
    return convert_time_format(time, fmt_in="secs", fmt_out="greta")


def secs2maude(time):
    """
    Convert CXC seconds to MAUDE date.

    This is equivalent to ``CxoTime(time, format='secs').maude`` but potentially 10x faster.

    Format in: CXC seconds (numeric)
    Format out: YYYYDDD.HHMMSSsss (int)

    Parameters
    ----------
    time : float, int, list, ndarray
        CXC seconds

    Returns
    -------
    date : int, ndarray[int]
        MAUDE date
    """
    return convert_time_format(time, fmt_in="secs", fmt_out="maude")


def secs2jd(time):
    """
    Convert CXC seconds to Julian Date.

    This is equivalent to ``CxoTime(time, format='secs').jd`` but potentially 10x faster.

    Format in: CXC seconds (numeric)
    Format out: Julian Date (numeric)

    Parameters
    ----------
    time : float, int, list, ndarray
        CXC seconds

    Returns
    -------
    jd : float, ndarray[float]
        Julian Date
    """
    return convert_time_format(time, fmt_in="secs", fmt_out="jd")


def secs2date(time):
    """
    Convert CXC seconds to Date (Year, day-of-year, time).

    This is equivalent to ``CxoTime(time, format='secs').date`` but potentially 10x faster.

    Format in: CXC seconds (numeric)
    Format out: YYYY:DDD:HH:MM:SS.sss

    Parameters
    ----------
    time : float, int, list, ndarray
        CXC seconds

    Returns
    -------
    date : str, ndarray[str]
        Date (Year, day-of-year, time)
    """
    return convert_time_format(time, fmt_in="secs", fmt_out="date")


def greta2secs(date):
    """
    Convert GRETA date to CXC seconds.

    This is equivalent to ``CxoTime(date, format='greta').secs`` but potentially 10x faster.

    Format in: YYYYDDD.HHMMSSsss (str or float)
    Format out: CXC seconds (numeric)

    Parameters
    ----------
    date : str, bytes, float, list, np.ndarray
        GRETA date

    Returns
    -------
    time : float, ndarray[float]
        CXC seconds
    """
    return convert_time_format(date, fmt_in="greta", fmt_out="secs")


def greta2maude(date):
    """
    Convert GRETA date to MAUDE date.

    This is equivalent to ``CxoTime(date, format='greta').maude`` but potentially 10x faster.

    Format in: YYYYDDD.HHMMSSsss (str or float)
    Format out: YYYYDDD.HHMMSSsss (int)

    Parameters
    ----------
    date : str, bytes, float, list, np.ndarray
        GRETA date

    Returns
    -------
    date : int, ndarray[int]
        MAUDE date
    """
    return convert_time_format(date, fmt_in="greta", fmt_out="maude")


def greta2jd(date):
    """
    Convert GRETA date to Julian Date.

    This is equivalent to ``CxoTime(date, format='greta').jd`` but potentially 10x faster.

    Format in: YYYYDDD.HHMMSSsss (str or float)
    Format out: Julian Date (numeric)

    Parameters
    ----------
    date : str, bytes, float, list, np.ndarray
        GRETA date

    Returns
    -------
    jd : float, ndarray[float]
        Julian Date
    """
    return convert_time_format(date, fmt_in="greta", fmt_out="jd")


def greta2date(date):
    """
    Convert GRETA date to Date (Year, day-of-year, time).

    This is equivalent to ``CxoTime(date, format='greta').date`` but potentially 10x faster.

    Format in: YYYYDDD.HHMMSSsss (str or float)
    Format out: YYYY:DDD:HH:MM:SS.sss

    Parameters
    ----------
    date : str, bytes, float, list, np.ndarray
        GRETA date

    Returns
    -------
    date : str, ndarray[str]
        Date (Year, day-of-year, time)
    """
    return convert_time_format(date, fmt_in="greta", fmt_out="date")


def maude2secs(date):
    """
    Convert MAUDE date to CXC seconds.

    This is equivalent to ``CxoTime(date, format='maude').secs`` but potentially 10x faster.

    Format in: YYYYDDDHHMMSSsss (str or int)
    Format out: CXC seconds (numeric)

    Parameters
    ----------
    date : str, bytes, int, list, ndarray
        MAUDE date

    Returns
    -------
    time : float, ndarray[float]
        CXC seconds
    """
    return convert_time_format(date, fmt_in="maude", fmt_out="secs")


def maude2greta(date):
    """
    Convert MAUDE date to GRETA date.

    This is equivalent to ``CxoTime(date, format='maude').greta`` but potentially 10x faster.

    Format in: YYYYDDDHHMMSSsss (str or int)
    Format out: YYYYDDD.HHMMSSsss (str)

    Parameters
    ----------
    date : str, bytes, int, list, ndarray
        MAUDE date

    Returns
    -------
    date : str, np.ndarray[str]
        GRETA date
    """
    return convert_time_format(date, fmt_in="maude", fmt_out="greta")


def maude2jd(date):
    """
    Convert MAUDE date to Julian Date.

    This is equivalent to ``CxoTime(date, format='maude').jd`` but potentially 10x faster.

    Format in: YYYYDDDHHMMSSsss (str or int)
    Format out: Julian Date (numeric)

    Parameters
    ----------
    date : str, bytes, int, list, ndarray
        MAUDE date

    Returns
    -------
    jd : float, ndarray[float]
        Julian Date
    """
    return convert_time_format(date, fmt_in="maude", fmt_out="jd")


def maude2date(date):
    """
    Convert MAUDE date to Date (Year, day-of-year, time).

    This is equivalent to ``CxoTime(date, format='maude').date`` but potentially 10x faster.

    Format in: YYYYDDDHHMMSSsss (str or int)
    Format out: YYYY:DDD:HH:MM:SS.sss

    Parameters
    ----------
    date : str, bytes, int, list, ndarray
        MAUDE date

    Returns
    -------
    date : str, ndarray[str]
        Date (Year, day-of-year, time)
    """
    return convert_time_format(date, fmt_in="maude", fmt_out="date")


def jd2secs(jd):
    """
    Convert Julian Date to CXC seconds.

    This is equivalent to ``CxoTime(jd, format='jd').secs`` but potentially 10x faster.

    Format in: Julian Date (numeric)
    Format out: CXC seconds (numeric)

    Parameters
    ----------
    jd : float, int, list, ndarray
        Julian Date

    Returns
    -------
    time : float, ndarray[float]
        CXC seconds
    """
    return convert_time_format(jd, fmt_in="jd", fmt_out="secs")


def jd2greta(jd):
    """
    Convert Julian Date to GRETA date.

    This is equivalent to ``CxoTime(jd, format='jd').greta`` but potentially 10x faster.

    Format in: Julian Date (numeric)
    Format out: YYYYDDD.HHMMSSsss (str)

    Parameters
    ----------
    jd : float, int, list, ndarray
        Julian Date

    Returns
    -------
    date : str, np.ndarray[str]
        GRETA date
    """
    return convert_time_format(jd, fmt_in="jd", fmt_out="greta")


def jd2maude(jd):
    """
    Convert Julian Date to MAUDE date.

    This is equivalent to ``CxoTime(jd, format='jd').maude`` but potentially 10x faster.

    Format in: Julian Date (numeric)
    Format out: YYYYDDD.HHMMSSsss (int)

    Parameters
    ----------
    jd : float, int, list, ndarray
        Julian Date

    Returns
    -------
    date : int, ndarray[int]
        MAUDE date
    """
    return convert_time_format(jd, fmt_in="jd", fmt_out="maude")


def jd2date(jd):
    """
    Convert Julian Date to Date (Year, day-of-year, time).

    This is equivalent to ``CxoTime(jd, format='jd').date`` but potentially 10x faster.

    Format in: Julian Date (numeric)
    Format out: YYYY:DDD:HH:MM:SS.sss

    Parameters
    ----------
    jd : float, int, list, ndarray
        Julian Date

    Returns
    -------
    date : str, ndarray[str]
        Date (Year, day-of-year, time)
    """
    return convert_time_format(jd, fmt_in="jd", fmt_out="date")


def date2secs(date):
    """
    Convert Date (Year, day-of-year, time) to CXC seconds.

    This is equivalent to ``CxoTime(date, format='date').secs`` but potentially 10x faster.

    Format in:
    - YYYY:DDD:HH:MM:SS.sss
    - YYYY:DDD:HH:MM:SS
    - YYYY:DDD:HH:MM
    - YYYY:DDD
    Format out: CXC seconds (numeric)

    Parameters
    ----------
    date : str, bytes, float, list, ndarray
        Date (Year, day-of-year, time)

    Returns
    -------
    time : float, ndarray[float]
        CXC seconds
    """
    return convert_time_format(date, fmt_in="date", fmt_out="secs")


def date2greta(date):
    """
    Convert Date (Year, day-of-year, time) to GRETA date.

    This is equivalent to ``CxoTime(date, format='date').greta`` but potentially 10x faster.

    Format in:
    - YYYY:DDD:HH:MM:SS.sss
    - YYYY:DDD:HH:MM:SS
    - YYYY:DDD:HH:MM
    - YYYY:DDD
    Format out: YYYYDDD.HHMMSSsss (str)

    Parameters
    ----------
    date : str, bytes, float, list, ndarray
        Date (Year, day-of-year, time)

    Returns
    -------
    date : str, np.ndarray[str]
        GRETA date
    """
    return convert_time_format(date, fmt_in="date", fmt_out="greta")


def date2maude(date):
    """
    Convert Date (Year, day-of-year, time) to MAUDE date.

    This is equivalent to ``CxoTime(date, format='date').maude`` but potentially 10x faster.

    Format in:
    - YYYY:DDD:HH:MM:SS.sss
    - YYYY:DDD:HH:MM:SS
    - YYYY:DDD:HH:MM
    - YYYY:DDD
    Format out: YYYYDDD.HHMMSSsss (int)

    Parameters
    ----------
    date : str, bytes, float, list, ndarray
        Date (Year, day-of-year, time)

    Returns
    -------
    date : int, ndarray[int]
        MAUDE date
    """
    return convert_time_format(date, fmt_in="date", fmt_out="maude")


def date2jd(date):
    """
    Convert Date (Year, day-of-year, time) to Julian Date.

    This is equivalent to ``CxoTime(date, format='date').jd`` but potentially 10x faster.

    Format in:
    - YYYY:DDD:HH:MM:SS.sss
    - YYYY:DDD:HH:MM:SS
    - YYYY:DDD:HH:MM
    - YYYY:DDD
    Format out: Julian Date (numeric)

    Parameters
    ----------
    date : str, bytes, float, list, ndarray
        Date (Year, day-of-year, time)

    Returns
    -------
    jd : float, ndarray[float]
        Julian Date
    """
    return convert_time_format(date, fmt_in="date", fmt_out="jd")
