"""Make cxotime/converters.py from functions in convert.py.

This script is run by hand to update the converters.py file in the cxotime package::

  $ python -m cxotime.scripts.make_converters > cxotime/converters.py

This is a one-time operation if a new converter is added to convert.py. The file may
need to be ruff formatted.
"""

from pathlib import Path

import jinja2
from astropy.time import TIME_FORMATS  # Updated by new formats defined in cxotime

from cxotime import CxoTime, convert

TEMPLATE = '''\
"""Fast time converter functions.

Autogenerated by {{file}} at {{date}}
"""
from cxotime.convert import convert_time_format

__all__ = [
{% for func in funcs %}    "{{ func['fmt1'] }}2{{ func['fmt2'] }}",
{% endfor %}
]

{% for func in funcs %}
def {{ func['fmt1'] }}2{{ func['fmt2'] }}({{ func['input_name'] }}):
{{ func['doc_string']}}
    return convert_time_format({{ func['input_name'] }}, fmt_in="{{ func['fmt1'] }}", fmt_out="{{ func['fmt2'] }}")

{% endfor %}
'''  # noqa: E501


def make_docstring(fmt_in, fmt_out):
    """Make a docstring for a converter function."""
    fmt_in_cls = TIME_FORMATS[fmt_in]
    doc_in = fmt_in_cls.convert_doc
    fmt_out_cls = TIME_FORMATS[fmt_out]
    doc_out = fmt_out_cls.convert_doc
    equiv = (
        f"CxoTime({doc_in['input_name']},"
        f" format='{fmt_in_cls.name}').{fmt_out_cls.name}"
    )
    out = f'''\
    """
    Convert {doc_in["descr_short"]} to {doc_out["descr_short"]}.

    This is equivalent to ``{equiv}`` but potentially 10x faster.

    Format in: {doc_in["input_format"]}
    Format out: {doc_out["output_format"]}

    Parameters
    ----------
    {doc_in["input_name"]} : {doc_in["input_type"]}
        {doc_in["descr_short"]}

    Returns
    -------
    {doc_out["input_name"]} : {doc_out["output_type"]}
        {doc_out["descr_short"]}
    """'''
    return out


def main():
    """Make the converters.py file."""
    # Define shortcuts for converters like date2secs or greta2date.
    # Accept each value of globals if it matches the pattern convert_jd1_jd2_to_...
    funcs = []
    for fmt1 in convert.CONVERT_FORMATS:
        input_name = TIME_FORMATS[fmt1].convert_doc["input_name"]
        for fmt2 in convert.CONVERT_FORMATS:
            if fmt1 != fmt2:
                func = {
                    "fmt1": fmt1,
                    "fmt2": fmt2,
                    "input_name": input_name,
                    "doc_string": make_docstring(fmt1, fmt2),
                }
                funcs.append(func)
    context = {"funcs": funcs, "file": Path(__file__).name, "date": CxoTime.now().iso}
    out = jinja2.Template(TEMPLATE).render(context)
    print(out)


if __name__ == "__main__":
    main()
